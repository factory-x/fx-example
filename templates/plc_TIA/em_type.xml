{% macro render(lib, emtype_id, emtype) %}
{%- import "network_start.xml" as network_start %}
{%- import "network_middle.xml" as network_middle %}
{%- import "network_end.xml" as network_end %}
{%- import "actions.xml" as actions %}
{%- import "parameter.xml" as p %}
{#- create label counters: reset also creates them if not existing -#}
{{ lib.reset_counter('statelabel') }}
{{ lib.reset_counter('condition_label') }}
{{ lib.reset_counter('error_label') }}
<SPLIT>blockname: "{{emtype_id}}"</SPLIT>
<?xml version="1.0" encoding="utf-8"?>
<Document>
  <Engineering version="V15" />
  <DocumentInfo>
    <Created>2018-05-29T12:25:38.1552518Z</Created>
    <ExportSetting>WithDefaults</ExportSetting>
    <InstalledProducts>
      <Product>
        <DisplayName>Totally Integrated Automation Portal</DisplayName>
        <DisplayVersion>V15</DisplayVersion>
      </Product>
      <OptionPackage>
        <DisplayName>TIA Portal Openness</DisplayName>
        <DisplayVersion>V15</DisplayVersion>
      </OptionPackage>
      <Product>
        <DisplayName>STEP 7 Professional</DisplayName>
        <DisplayVersion>V15</DisplayVersion>
      </Product>
      <Product>
        <DisplayName>WinCC Professional</DisplayName>
        <DisplayVersion>V15</DisplayVersion>
      </Product>
    </InstalledProducts>
  </DocumentInfo>
  <SW.Blocks.FB ID="0">
    <AttributeList>
      <AutoNumber>true</AutoNumber>
      <HeaderAuthor />
      <HeaderFamily />
      <HeaderName />
      <HeaderVersion>0.1</HeaderVersion>
      <Interface><Sections xmlns="http://www.siemens.com/automation/Openness/SW/Interface/v3">
  <Section Name="Input">
	{#- todo: how to update sampletime in TIA? -#}
	{{ p.render(lib, "Input", "sampletime", "Real", "the scantime of this EM/phase, used to increase timers") }}
{#- add all the auto-generated inputs -#}
{% for input_name, input in emtype.Inputs %}
	{{ p.render(lib, "Input", input_name, input.Type, input.Comment + " - " + input.Comment_io) }}
{%- endfor %}
  </Section>
  <Section Name="Output">
	{{ p.render(lib, "Output", "steptime_s", "Real", "complete steptime in seconds. same value as the other steptimes") }}
	{{ p.render(lib, "Output", "steptime_m", "Real", "complete steptime in minutes. same value as the other steptimes") }}
	{{ p.render(lib, "Output", "steptime_h", "Real", "complete steptime in hours. same value as the other steptimes") }}
	
	{{ p.render(lib, "Output", "first_scan", "Bool", "first scan of the step active") }}
	{{ p.render(lib, "Output", "last_scan", "Bool", "last scan of the step active") }}
	{{ p.render(lib, "Output", "error_index_db", "Bool", "em_id doesn't fit in the index db") }}
	{# add all the auto-generated outputs -#}
{% for output_name, output in emtype.Outputs %}
	{{ p.render(lib, "Output", output_name, output.Type, output.Comment + " - " + output.Comment_io) }}
{%- endfor %}  
  </Section>
  <Section Name="Static">
	{{ p.render(lib, "Static", "previous_Command", "Int", "previous Command") }}
	{{ p.render(lib, "Static", "SP_PV", '"' + emtype_id + "_UDT" + '"', "UDT for receiving Setpoints and sending Process Values") }}
  </Section>
  <Section Name="Temp">
	{{ p.render(lib, "Temp", "initial_scan", "Bool", "pulse active on the first cycle of a new scan") }}
	{{ p.render(lib, "Temp", "T_dbnum", "Int", "DB number of this block") }}
	{{ p.render(lib, "Temp", "T_address", "Int", "address in the Index Table DB") }}
	{{ p.render(lib, "Temp", "T_length", "Int", "length of the Index Table DB") }}
{# add all the auto-generated temps -#}
{# start with the calculation values -#}
{% for i in range(1, emtype.var_counter.value + 1) %}
	{{ p.render(lib, "Temp", "V" + i, "Real", "intermediate value for calculation") }}
{%- endfor %}
  </Section>
  <Section Name="Constant" />
</Sections></Interface>
      <MemoryLayout ReadOnly="true">Optimized</MemoryLayout>
      <Name>{{emtype_id}}</Name>
      <Number>1</Number>
      <ProgrammingLanguage>STL</ProgrammingLanguage>
      <UDABlockProperties />
      <UDAEnableTagReadback>false</UDAEnableTagReadback>
    </AttributeList>
    <ObjectList>
      <MultilingualText ID="1" CompositionName="Comment">
        <ObjectList>
          <MultilingualTextItem ID="2" CompositionName="Items">
            <AttributeList>
              <Culture>en-US</Culture>
              <Text>
{{ emtype_id }}
{{ emtype.Comment }}			  
			  </Text>
            </AttributeList>
          </MultilingualTextItem>
        </ObjectList>
      </MultilingualText>

{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

//### 0] init
	CLR
	=	error_index_db

	
//### 1] Check if the ID of this EM fits inside the EM Index table

    OPN   EM_Index //Open data block as shared data block
    L     DBLG //Load length of shared data block (length of DB)
    T     #T_length //transfer length to length
	
    L     #T_length //length=length/2
    L     2 
    /I    
    T     #T_length 

// Error and end the block if id bigger than length of the DB
    L     #T_length 
    L     #em_id 
    {{ "<=D" | escape }}
	= error_index_db
    BEC    //if id is bigger than length end the block
	
//### 2] Write this DB number to the EM Index table

// find the number of the current fb
    L     DINO
    T     #T_dbnum //find the db number of current fb

// calculate the real address	
    L     #em_id
    L     2 
    *I     
    T     #T_address 
	
// prepare the pointer for the location in the EM Index DB
// todo: can this code not simpeler? Probably no need to add with the zero-pointer	
    OPN   EM_Index 
    L     P#DBX 0.0 
    L     #T_address 
    SLD   3 
    +D     
    LAR1   

//write the DB number to the real address
    L     #T_dbnum 
    T     DBW [AR1,P#0.0] 
	
	

{{ network_middle.render(lib, 'STL') }}
The EM will publish its DB number to the EM Index table
{{ network_end.render(lib, "Publish DB number to EM Index") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}	

{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

{% for io_name, io in lib.select_interface_io(emtype.Inputs) %}

	{% if io.Type == 'Bool' or  io.Type == 'BOOL' or io.Type == 'bool' %}
	A	#SP_PV.{{io_name}}
	= 	{{io_name}}
	{% else %}
	L	#SP_PV.{{io_name}}
	T	{{io_name}}
	{% endif %}

{%- endfor %}

{{ network_middle.render(lib, 'STL') }}
network comment
{{ network_end.render(lib, "Copy all Setpoints from the UDT") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}

{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

	L	Request
	T 	Owner

{{ network_middle.render(lib, 'STL') }}
network comment
{{ network_end.render(lib, "Acquiring logic") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}

{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

// check if Command == previous_Command
	L 	Command
	L	previous_Command
	==I			// if condition true then {
	JCN TIM1
	
	// increase timer
	L	sampletime
	L	steptime_s
	+R
	T	steptime_s
	
	JU TIM2		// } else {
TIM1: NOP 0		

	// reset timer
	L	0.0
	T	steptime_s	

TIM2: NOP 0		// end if

// calculate the other two timers
	L 	steptime_s
	L 	60.0
	/R
	T   steptime_m
	
	L	60.0
	/R
	T	steptime_h

{{ network_middle.render(lib, 'STL') }}
If the previous Command is not the same as the current one
then reset the timers, else increase them
This is at the start of the FB because normal commandchanges will take
till the next cycle to become active
{{ network_end.render(lib, "Steptimers") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}	

{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

	L 	Command
	L	previous_Command
	{{ "<>I" | escape }}
	=	initial_scan

{{ network_middle.render(lib, 'STL') }}
create a pulse active on the first cycle of a new scan
this signal can be used in the state to execute some actions in the first cycle of the state
{{ network_end.render(lib, "detect initial scan") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}

{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

	L 	Command
	T	previous_Command

{{ network_middle.render(lib, 'STL') }}
network comment
{{ network_end.render(lib, "Save old step") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}	

{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

	CLR
	{#- loop over all the inputs #}
	{%- for input_name, input_object in emtype.Inputs %}
		{%- if input_object.Error_Signal == true %}
	O	{{ input_name }}
		{%- endif %}
	{%- endfor %}
	=	CM_error

{{ network_middle.render(lib, 'STL') }}
network comment
{{ network_end.render(lib, "Collect the errors from the CMs") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}	

{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

	CLR
	
	// clear the error no
	L	0
	T CM_error_no
	
	{# loop over all the inputs #}
	{%- for input_name, input_object in emtype.Inputs %}
		{%- if input_object.Error_Signal == true %}
		
	A	{{ input_name }}
	JCN	E{{ lib.increase_counter('error_label') }}

	L	{{ lib.get_message_id('CM error: ' + input_name ) }} // 'CM error: {{ input_name }}'
	T 	CM_error_no
	
E{{ lib.get_counter('error_label') }}:	NOP 0	
		{%- endif %}
	{%- endfor %}

{{ network_middle.render(lib, 'STL') }}
This code tries to assign an error message to each CM error
If multiple CMs have an error then it only stores one
This is the EM type so we don't know which CM instance is connected
So the error only contains the general name of the CM instance
If the actual name needs to be shown then it could be deducted
at a higher level using the CM name and EM instance 
network_end.render(lib, "ssign a message number to each error") }}
{{ network_end.render(lib, "Assign a message number to each error") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}

{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

// empty placeholder network

{{ network_middle.render(lib, 'STL') }}
################################
################################
	Placeholder network to indicate the start of the actual sequence
################################	  
################################
{{ network_end.render(lib, "START OF THE STATES") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}

	{#- loop over all the states #}
	{%- for state_number, state_object in emtype.States %}
{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

// skip this network if stepnumber not equal to {{state_number}}
	L 	Command
	L 	{{state_number}}
	==I
	JCN J{{ lib.increase_counter('statelabel') }}
{% if state_object.Actions_First_Scan != undefined %}	
//---------------------------------
// Actions (first scan)
//---------------------------------
	A	initial_scan 
	JCN   C{{ lib.get_counter('statelabel') }}
		L -1.0	 // value to show that the EM is in a state transition
		T Status		
		{{- actions.render(lib, state_object.Actions_First_Scan) }}
	JU	D{{ lib.get_counter('statelabel') }}	//skip the continuous steps during the initial scan
C{{ lib.get_counter('statelabel') }}: NOP   0 

{% endif %}
//---------------------------------
// Actions (continuous)
//---------------------------------
		{{- actions.render(lib, state_object.Actions) -}}

//---------------------------------
// --- CONDITIONS ---
//---------------------------------
			{#- first make calculations if the condition logic is too complex -#}
			{%- for calc in state_object.Conditions.condition_calc %}
			
// Calculation: {{calc.comment | safe}}
	L 	{{calc.v1.value}}
	L 	{{calc.v2.value}}
	{{calc.operation | safe}}R
	{% if calc.boolean %}=	{{calc.value.value}}{% else %}T 	{{calc.value.value}}{% endif %}
				
			{%- endfor %}

// Condition Logic
	SET	// make sure RLO is high so the state can happen when no conditions present
			{# then loop over the condition logic -#}
			{%- for logic in state_object.Conditions.transition_logic %}
	{{ lib.compact_logic(logic.logic, logic.invert) }}	{{logic.result.value}} {% if logic.condition != undefined %}	// {{logic.condition | safe}}{% endif %}
			{%- endfor -%}
			{#- code for transferring to the next step #}
	JCN L{{ lib.get_counter('statelabel') }}
	
	L   Command
	T   Status
	
L{{ lib.get_counter('statelabel') }}: NOP 0
{% if state_object.Actions_Last_Scan != undefined %}
//---------------------------------
// Actions (last scan)
// This is immediately executed once the command changes
//---------------------------------
	L	Command
	L	previous_Command
	{{ "<>I" | escape }}
	JCN D{{ lib.get_counter('statelabel') }}
		{{- actions.render(lib, state_object.Actions_Last_Scan) }}	
{% endif %}
D{{ lib.get_counter('statelabel') }}: NOP 0	

//---------------------------------
// End of network: jump here if step not active
// Jump to end of this FB if the step has been active to avoid
// execution of another step in the same scan
//---------------------------------		
	JU	ENDS
J{{ lib.get_counter('statelabel') }}: NOP 0

	
{{ network_middle.render(lib, 'STL') }}
{{ lib.comment_all_lines(state_object.Comment) | safe }} {# todo: create mini-FDS in each state comment as option #}
{{ network_end.render(lib, "State " + state_number + ": " + lib.firstline(state_object.Comment)) }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}
	{% endfor %}

{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

// jump location for the state that is currently active
ENDS:	NOP 0

{{ network_middle.render(lib, 'STL') }}
################################
################################
	Placeholder network to indicate the end of the actual sequence
################################	  
################################
{{ network_end.render(lib, "END OF THE STATES") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}

{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

	{{- actions.render(lib, emtype.General_Actions.After) -}}

{{ network_middle.render(lib, 'STL') }}
General Actions - After
{{ network_end.render(lib, "eneral Actions - After") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}	
 
{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

{% for io_name, io in lib.select_interface_io(emtype.Outputs) %}

	{% if io.Type == 'Bool' or  io.Type == 'BOOL' or io.Type == 'bool' %}
	A 	{{io_name}}
	=	#SP_PV.{{io_name}}
	{% else %}
	L	{{io_name}}
	T	#SP_PV.{{io_name}}
	{% endif %}

{%- endfor %}

{{ network_middle.render(lib, 'STL') }}
network comment
{{ network_end.render(lib, "Copy all Process Values to the UDT") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}

{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

	L 	0
	T 	Request

{{ network_middle.render(lib, 'STL') }}
Phases don't clean up their requests on the EM side
So at the end of the EM reset the request
If the phase is still there then it will write the request again by the next scan
{{ network_end.render(lib, "Clean up request") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}
 
{#- ### START OF NETWORK ### #}
{#--#}
{#--#}
{{ network_start.render(lib) }}

// empty placeholder network

{{ network_middle.render(lib, 'STL') }}
network comment
{{ network_end.render(lib, "network title") }}
{#--#}
{#--#}
{#- ### END OF NETWORK ### #}		
  
      <MultilingualText ID="D" CompositionName="Title">
        <ObjectList>
          <MultilingualTextItem ID="E" CompositionName="Items">
            <AttributeList>
              <Culture>en-US</Culture>
              <Text>{{ emtype_id }}_fc</Text>
            </AttributeList>
          </MultilingualTextItem>
        </ObjectList>
      </MultilingualText>
    </ObjectList>
  </SW.Blocks.FB>
</Document>
{% endmacro %}