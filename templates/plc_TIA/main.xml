{%- import "cm_instance_db.xml" as cm_instance_db %}
{%- import "cm_instance_sp.xml" as cm_instance_sp %}
{%- import "cm_instance_weight.xml" as cm_instance_weight %}
{%- import "cm_instance_fc.xml" as cm_instance_fc %}
{%- import "em_type_interface.xml" as em_type_interface %}
{%- import "em_type.xml" as em_type %}
{%- import "em_index.xml" as em_index %}
{{ lib.init_counter('ID', 10000) }}
{#- this line removes all whitespaces before the xml definition -#}

{#- Other Modules #}
<SPLIT>blockname: "weight_calculation"</SPLIT>
{% include "./modules/weight_calculation.xml" %}

{#- EM Index, used to store the DB numbers of all EM #}
<SPLIT>blockname: "em_index"</SPLIT>
{{ em_index.render(lib) }}

{# EM Types (before phase types because the interface FB's are needed in the phases #}
{% for emtype_id, emtype in model.Equipment_Modules.Types %}
	{{- lib.log('rendering EM type ' + emtype_id) -}}
	{{ em_type_interface.render(lib, emtype_id, emtype) }}
	{{ em_type.render(lib, emtype_id, emtype) }}
{% endfor %}

{#- CM Types #}
<SPLIT>blockname: "cm_valve"</SPLIT>
{% include "./control_modules/cm_valve.xml" %}
<SPLIT>blockname: "cm_motor"</SPLIT>
{% include "./control_modules/cm_motor.xml" %}
<SPLIT>blockname: "cm_motor_vfd"</SPLIT>
{% include "./control_modules/cm_motor_vfd.xml" %}
<SPLIT>blockname: "cm_ai"</SPLIT>
{% include "./control_modules/cm_ai.xml" %}
<SPLIT>blockname: "cm_di"</SPLIT>
{% include "./control_modules/cm_di.xml" %}
<SPLIT>blockname: "cm_pid"</SPLIT>
{% include "./control_modules/cm_pid.xml" %}

{#- CM Instances #}
{% for instance_id, instance in model.Control_Modules.Instances %}
	{#- only render the CM's that are used #}
	{%- if instance.used == true %}
		{{ cm_instance_db.render(lib, instance_id, instance) }}
		{#- only for the PID: create an interface block for changing the setpoints #}
		{#- this needs to be done indirectly based on pulses because else the setpoints are continuously overwritten #}
		{%- if instance.Type == "PID" %}
			{{ cm_instance_sp.render(lib, instance_id, instance) }}
		{%- endif %}
		{#- only for the AI: create an interface block for calculating the weight from the level #}
		{%- if instance.Type == "AI" and instance.Properties.calculate_weight == 1 %}
			{{ cm_instance_weight.render(lib, instance_id, instance) }}
		{%- endif %}
		{#- create the FC #}
		{{ cm_instance_fc.render(lib, instance_id, instance) }}rrrr
	{%- endif %}
{% endfor %}


<SPLIT>blockname: "test"</SPLIT>
{% include "./test/test.xml" %}
