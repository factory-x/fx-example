
{% macro render(lib, cm_id, cm) %}

// ___{{ cm_id }}

// CM Instance DB
// DB{{ cm.DB }} = {{ cm_id }}
// FB{{ cm.Type_FB }} = {{ cm.Block_Name }}
DATA_BLOCK DB{{ cm.DB }} FB{{ cm.Type_FB }}
BEGIN
END_DATA_BLOCK

{#- only for the PID: create an interface block for changing the setpoints #}
{#- this needs to be done indirectly based on pulses because else the setpoints are continuously overwritten #}

{%- if cm.Type == "PID" %}
	{%- set SP_DB = cm.Additional_Instance_Blocks._SP %}

DATA_BLOCK  {{SP_DB}}
// tagstruct_name = PID_interface
STRUCT
	Operator_Setpoint { S7_m_c := 'true' } : REAL;
	Set_SP { S7_m_c := 'true' } : BOOL;
	Output_Value { S7_m_c := 'true' } : REAL;
	Set_Output { S7_m_c := 'true' } : BOOL;
END_STRUCT
BEGIN
END_DATA_BLOCK

{%- endif %}

{#- only for the AI: create an interface block for calculating the weight from the level #}
{%- if cm.Type == "AI" and cm.Properties.calculate_weight == 1 %}

DATA_BLOCK  {{ lib.create_new_symbol(cm_id + '_extra', 'DB', undefined, '') }} // {{cm_id}}_extra
// tagstruct_name = extra
STRUCT
	Weight { S7_m_c := 'true' } : REAL;
END_STRUCT
BEGIN
END_DATA_BLOCK


{%- endif %}

{#- create the FC #}

FUNCTION "{{ cm_id }}_FC" : VOID
TITLE ={{ cm_id }}_FC
// {{ cm_id }}_FC
{{ lib.comment_all_lines(cm.Comment) }}
AUTHOR : 
FAMILY : 'cminst'
NAME : namehead
VERSION : 0.1

BEGIN

{#- only for the PID #}
{%- if cm.Type == "PID" %}
NETWORK
TITLE = Change PID Setpoints
//--------------------------------
// The phase FBs write on the operator setpoints of the PID-controller
// To avoid that the setpoints are always overwritten (and blocking operator control)
// we use pulses generated by the phase to set the setpoints only at specific moments
// i_fOCmdSP (setpoint)
// i_fOCmdMANOP (output)
//--------------------------------

// Write the Operator_Setpoint
A	{{SP_DB}}.Set_SP;
JCN J001;

	L {{SP_DB}}.Operator_Setpoint;
	T DB{{cm.DB}}.i_fOCmdSP;

J001: NOP 0;


// Write the Output_Value
A	{{SP_DB}}.Set_Output;
JCN J002;

	L {{SP_DB}}.Output_Value;
	T DB{{cm.DB}}.i_fOCmdMANOP;

J002: NOP 0;

{%- endif %}

NETWORK
TITLE = Main
//--------------------------------
// {{cm.Controller}}
//--------------------------------

CALL FB{{ cm.Type_FB }}, DB {{ cm.DB }}
{#- loop over all the inputs and outputs #}
{%- for link in lib.concat(cm.Links.Inputs, cm.Links.Outputs) %}
	{%- if loop.length == 1 %}
	({{ link.connection_left }} := {{ link.connection_right }})
	{%- elseif loop.first == true -%}
	({{ link.connection_left }} := {{ link.connection_right }},
	{%- elseif loop.last == true %}
	{{ link.connection_left }} := {{ link.connection_right }})
	{%- else %}
	{{ link.connection_left }} := {{ link.connection_right }},
	{%- endif %}
{%- endfor -%};


{#- only for the AI: create an interface block for calculating the weight from the level #}
{%- if cm.Type == "AI" and cm.Properties.calculate_weight == 1 %}

NETWORK
TITLE = Calculate the weight
//--------------------------------
// 
//--------------------------------

	CALL FC30 (
		Diameter 		:= {{ cm.Properties.diameter }},	
		Cone_Height 	:= {{ cm.Properties.cone_height }},	
		Zero 			:= {{ cm.Properties.diameter }},
		Level 			:= {{ cm_id }}.QfVal,
		Density	 		:= {{ cm.Properties.density }},
		Weight			:= {{ cm_id }}_extra.Weight);

{%- endif %}
	
END_FUNCTION
{% endmacro %}